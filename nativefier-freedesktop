#!/bin/bash

if [[ $# -eq 0 ]] ; then
    webapp=`kdialog --getopenfilename ~ .webapp`;
    if [ $? -eq 0 ]; then
    echo "$webapp selected"
    else
        exit 0;
    fi
else
	if [[ "$1" == "--help" ]] ; then
		echo "
    Usage: nativefier-freedesktop [options] [<file.webapp>]

    Options:

        --help                  shows this helps message


    <file.webapp>: a .webapp file used as a guide to create the application;
                   if not specified, a file dialog will popup to ask for a
                   .webapp file;
                   use the url2webapp script to create a .webapp file from
                   an url
"
		exit 0;
	else
		webapp="$1";
    fi
fi

# make temp folder:
mkdir .nf_temp;

# resolve absolute path if relative, otherwise cp on line 219 will fail
webapp=`readlink -f "$webapp"`;

# copy the .webapp into it:
cp "$webapp" ".nf_temp/${webapp##*/}"

# move to it:
cd .nf_temp;

# extract .webapp:
tar -zxvf "${webapp##*/}";

# check if "name" file exists:
if [ -f name ]; then
    # if yes, assign "name" var to its content:
    name=`cat name`;
else
    # if not, ask to the user to insert it
    # (useful for self-hosted apps with custom domain)
    # as convention use reverse URL, i.e. org.kde.webapp:
    name=`kdialog --inputbox "Name, i.e. org.kde.webapp:" | tr ' ' '_'`
    if [ -z $name ]; then
		echo "File name is empty"
		rm -rf .nf_temp;
		exit 0;
	fi
fi

# read launcher name:
lname=`kreadconfig  --group 'Desktop Entry' --key Name --file $PWD/$name.desktop`

# confirm installation:
kdialog --title "Install Web App" --yesno "Do you want to install $lname?" || exit 0;

# check if "url" file exists:
if [ -f url ]; then
    # if yes, assign "url" var to its content:
    url=`cat url`;
else
    # if not, ask to the user to insert it
    # (useful for self-hosted apps with custom domain):
    url=`kdialog --inputbox URL:`
fi


# support flash?:
flash=1;
kdialog --title "Install Web App" --yesno "Does $lname need flash support?" || flash=0;
if [ "$flash" -eq 1 ]; then
	fp=`locate -e -L -l 1 -b '\libpepflashplayer.so'`;
	case "$?" in
		1)
			echo 'No flash plugin available'
			flash=0
			;;
		127)
			echo 'locate command not installed'
			flash=0
			;;
	esac
fi
if [ "$flash" -eq "1" ]; then
	fcmd="--flash --flash-path $fp";
else
	fcmd='';
fi


# copy the icon and the launcher to respective paths:
cp "$name".png ~/.local/share/icons/"$name".png;
cp "$name".desktop ~/.local/share/applications/"$name".desktop;

# make launcher executable:
chmod +x ~/.local/share/applications/"$name".desktop;

# make hidden directory ".webapp" in Home to store installed webapps:
mkdir ~/.webapps;

# make "lib" folder in .webapp folder:
mkdir ~/.webapps/lib;

# count *.css styles available:
cssn=`ls | grep .css | wc -l`;

# if there are more *.css let the user choose with a dialog:
if [ "$cssn" -gt "1" ]; then
    k=0;

    touch .tempfile
    onoff='on'

    for i in *.css
        do
            declare style_$k=`echo "${i%.*}"`;
            #echo "$k" >> .tempfile
            echo "$i" >> .tempfile
            echo "${i%.*}" >> .tempfile
            echo "$onoff" >> .tempfile
            onoff='off'
            ((k++))
        done;

    kd_arg=`cat .tempfile | tr '\n' ' '`

    rm -rf .tempfile

    style=`kdialog --radiolist "Select a theme:" $kd_arg 0 None off`

    if [ "$style" -eq 0 ]; then
    touch nostyle.css
    style=nostyle.css
    fi

    #for i in *.css
    #do
    #    declare style_$k=`echo "${i%.*}" | tr ' ' '_'`;
    #    ((k++));
    #done;
    #style=`kdialog --combobox "Choose a theme or leave it blank\nto use the web site default style:" $style_0 $style_1 $style_2 $style_3 $style_4 $style_5 $style_6 $style_7 $style_8 $style_9`.css | tr '_' ' ';
else
    style=`ls | grep .css`
fi

if [ "$cssn" -eq 0 ]; then
    touch nostyle.css
    style=nostyle.css
fi

## count *.js scripts available:
jsn=`ls | grep .js | wc -l`;

# if there is a *.js with the same name of the selected CSS, use it, if not, let the user choose:

if [ -f "${style%.*}.js" ]; then

script="${style%.*}.js"

else
    if [ "$jsn" -gt "1" ]; then
        k=0;

        for i in *.js
        do
            declare script_$k=`echo "${i%.*}" | tr ' ' '_'`;
            ((k++));
        done;
        script=`kdialog --combobox 'Choose a script:' $script_0 $script_1 $script_2 $script_3 $script_4 $script_5 $script_6 $script_7 $script_8 $script_9`.css;
    else
        script=`ls | grep .js`
    fi
fi

if [ "$jsn" -eq 0 ]; then
    touch noscript.js
    script=noscript.js
fi

# inform the installation is starting:
kdialog --msgbox "The installation has begun and may take a few minutes.\nYou will be notified upon completion.";

# check if the PNG icon file exists:
if [ -f "$name".png ]; then
    # exec nativefier using the icon and injecting style.css and script.js
    nativefierOutput=`nativefier -n "$name" -i "$name".png $fcmd --inject "$style" --inject "$script" "$url" ~/.webapps/ | sed -n '1,//s/App built to //p'`;
else
    # exec nativefier without icon and injecting style.css and script.js
    nativefierOutput=`nativefier -n "$name" $fcmd --inject "$style" --inject "$script" "$url" ~/.webapps/ | sed -n '1,//s/App built to //p'`;
fi



# check if the color scheme file exists:
colorn=`ls | grep .colors | wc -l`;

if [ "$colorn" -gt 0 ]; then

    for i in *.colors
    do
        cp -f "$i" ~/.local/share/color-schemes/;
    done
fi

# backup installers
mkdir ~/.webapps/installers
cp -f "$webapp" ~/.webapps/installers/"$name".webapp

# come back to parent folder:
cd ..;

# remove temp folder:
rm -rf .nf_temp;

# rename the installation folder from nativefier's default name
rm -rf ~/.webapps/"$name";
mv -f "$nativefierOutput" ~/.webapps/"$name";
# also rename the executable
mv $(find ~/.webapps/"$name"/ -type f -executable -print | grep -v -e lib -e.so) ~/.webapps/"$name"/"$name"
if [ $? -eq 0 ]; then
    echo 'binaries correclty built with Nativefier'
    else
        kdialog --title "Error" --yesno "An error occurred during installation of $lname. For a more detailed report, do you want to try again from the command line?" && konsole -e nativefier-freedesktop "$webapp"
    fi

# move to installation folder:
cd ~/.webapps/"$name";

# move the libraries that can be shared to "lib":
rm -rf ~/.webapps/lib/libffmpeg.so;
rm -rf ~/.webapps/lib/libnode.so;
mv -f libffmpeg.so ~/.webapps/lib/libffmpeg.so;
mv -f libnode.so ~/.webapps/lib/libnode.so;

# make links in installation folder to shared libraries in "lib":
ln -s -T ../lib/libffmpeg.so libffmpeg.so;
ln -s -T ../lib/libnode.so libnode.so;

# show notification:
kdialog --title "Installation completed" --yesno "$lname is ready.
\n Do you want launch it?" && ~/.webapps/"$name"/"$name";
